trigger:
  - main

pool:
  name: 'flxbuilder'

variables:
  azureSubscription: 'FLX'
  appName: 'flxstore'
  resourceGroup: 'FLX-TEST'
  nodeVersion: '20.x'
  artifactFeedName: 'FLXSTOREPACKAGES'
  universalPackageName: '$(appName)'

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: Build
    displayName: 'Build Node.js App'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive files'

    # ✅ Fixed: Publish to FLXSTOREPACKAGES feed (project-scoped)
    - task: UniversalPackages@0
      displayName: 'Publish Deployment Package to FLXSTOREPACKAGES Feed'
      inputs:
        command: 'publish'
        publishFeed: 'flxstore/$(artifactFeedName)'   # <-- Correct feed reference
        packageName: '$(appName)'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        version: '$(Build.BuildId)'

- stage: Deploy
  displayName: 'Deploy to Azure App Service'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          # ✅ Optional: Uncomment this to download the package from the feed instead of pipeline artifact
          # - task: UniversalPackages@0
          #   displayName: 'Download Package from FLXSTOREPACKAGES Feed'
          #   inputs:
          #     command: 'download'
          #     downloadFeed: 'flxstore/$(artifactFeedName)'
          #     packageName: '$(appName)'
          #     version: '$(Build.BuildId)'
          #     downloadPath: '$(Pipeline.Workspace)/feed_download'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(appName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'
            displayName: 'Deploy to Azure App Service'

          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(appName)'
              resourceGroupName: '$(resourceGroup)'
              appSettings: |
                [
                  {
                    "name": "KEY_VAULT_URL",
                    "value": "@Microsoft.KeyVault(SecretUri=https://flxlock.vault.azure.net/secrets/KEY-VAULT-URL/)",
                    "slotSetting": false
                  },
                  {
                    "name": "STORAGE_ACCOUNT_NAME",
                    "value": "@Microsoft.KeyVault(SecretUri=https://flxlock.vault.azure.net/secrets/STORAGE-ACCOUNT-NAME/)",
                    "slotSetting": false
                  },
                  {
                    "name": "CONTAINER_NAME",
                    "value": "@Microsoft.KeyVault(SecretUri=https://flxlock.vault.azure.net/secrets/CONTAINER-NAME/)",
                    "slotSetting": false
                  },
                  {
                    "name": "STORAGE_ACCOUNT_KEY",
                    "value": "@Microsoft.KeyVault(SecretUri=https://flxlock.vault.azure.net/secrets/STORAGE-ACCOUNT-KEY/)",
                    "slotSetting": false
                  },
                  {
                    "name": "STORAGE_KEY_SECRET_NAME",
                    "value": "@Microsoft.KeyVault(SecretUri=https://flxlock.vault.azure.net/secrets/STORAGE-KEY-SECRET-NAME/)",
                    "slotSetting": false
                  },
                  {
                    "name": "NODE_ENV",
                    "value": "production",
                    "slotSetting": false
                  },
                  {
                    "name": "PORT",
                    "value": "8080",
                    "slotSetting": false
                  }
                ]
            displayName: 'Configure App Settings'
